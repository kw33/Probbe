
; получить адрес массива хэшей 
; (хэндл окна)
virtual at ebp
widget WIDGET ; структура виджета
end

proc Widget.GetWindow  hwidget
    mov ebp,[hwidget]
    mov eax,[widget.HWindow]
    ret
endp ; можно в виде макроса

struc WIDGET {
    .HWindow dd ?
    .X dd ?
    .Y dd ?
    ...
}

; добавляет хэндл в конец массива
; там должен быть NULL !
; HTable - массив хэндлов (uint*,dword)
; HTSIZE - размер массива в байтах
; свободное место = NULL
proc Widget.Add  hwidget
    mov edx,HTable
    xor ecx,ecx
  .loop:
    cmp [edx+ecx],NULL
    jz  .found
    ; следщ.ячейка
    add ecx,4
    cmp ecx,HTSIZE
    jb  .loop ; меньше (uint)
    ; выход за предел
    ud2                            ; TO DO
  .found:
    ; ячея подходит
    mov eax,[hwidget]
    mov [edx+ecx],eax ; сохранили
    ret

;---------------------------
--НЕТтут можно определять адрес массива
по расположению хэндла. 
в каком массиве сидит.--НЕТ

; переместить хэндл в конец массива
; (на экране - на переднее место)
; HTable - массив хэндлов
; HTSIZE - размер массива в байтах
proc Widget.Move.End  hwidget
    ; взять хэндл его окна
    stdcall Widget.GetWindow, [hwidget]
    mov edx,eax
    ; сначала поиск хэндла в массиве
    ; eax - адрес массива, hwindow
    stdcall Widget.Find, eax, [hwidget]
    ; eax = смещение для хэндла в масс.
    jc .error ; eax=-1 или 0, ??
    ; поменять местами последний и этот
    ; найти конец массива не выйдя за границы


;---------------------------
proc HTable.FindWidget  hwidget
    ;
endp

;---------------------------
;proc HTable.FindEnd  addr
HTable.FindEnd:
    xor ecx,ecx
    mov eax,[esp+4] ; addr
  .next:
    or [eax+ecx],NULL
    jz .exit
    add ecx,4
    cmp ecx,HTSIZE
    jb .next
    ; вышли за пределы
    stc
    ret 4
  .exit:
    clc
    ret 4
;endp


;---------------------------
macro FindNULL reg
    ; reg - addr
  @@:
    add reg,4
    cmp [reg-4],NULL
    jnz @b
    sub reg,4
endm

;***************;***************
должно быть так -
данные для виджета:
 *.hwindow ; хэндл его окна
 *.X
 *.Y
 ..... прочее
в данных окна
 *.HTable ; адрес таблицы хэндлов
 ....


;***************;***************
; многопоточность для кучи

    фор кол-во битов
    lock bts R32,R32
    jc .уже_установлен_в1
    некст
    ...

.уже_установлен_в1:
    тут надо вернуть обратно в 0
    установленные в 1 биты.

или блочить всю кучу...
другой поток должен это увидеть и 
начать поиск поновой...

или блочить кучу перед началом записи, но это не 100%.

----------------

##########################################

куча - связанный список...вряд ли

для хранения структур эл-тов управления
массив на 100 двордов
каждый дворд - указатель на структуру э.у.
=0 - пустая ячейка
=-1 - конец массива
управлять как кучей

или
помнить количество элементов и при удалении
сдвигать хвост массива
так лучче
DeleteCtrlFromTable()

----------
чтобы сделать подключаемые внешние контролы
надо

стандартные контролы имеют
ID = 1..255, к примеру
для подключенных - это адрес CtrlProc
или и для стандартных - тоже адр проц

структура контрола имеет стандартную часть
ptrCtrlProc, x, y, dx, dy, focus, ...
и дополнения

DispatchMessage шерстит список контролов
(массив), если мышь, то проверяет попадание, если клавиша, то проверяет фокус
или перерисовывает


---------------------------
;somecontrol 
    dd тип ктрола
    dd text, x, y, dx, dy,\
       forecolor, bgcolor, edge
    dd winproc 
или 
    mouse_event_proc
    keyb_event_proc
    draw_proc
--- для контрола-контейнера еще и массив
    dd control1
    dd control2
    dd control3
    0000


; типы ктрл
CTRL_LABEL?
CTRL_TEXT
CTRL_BUTTON
CTRL_MENU
CTRL_IMAGE
CTRL_PROGRESS
...
CTRL_BLANK


; table of controls size
CtrlSizeTable:
    dd 28 ; CTRL_LABEL
    dd 36 ; CTRL_IMG
    ...

ControlCount dd 0
ControlList rd 100 ; heads of controls
   массив адресов структур ктролов
-----------

proc AddControl memptr
; memptr - addr of structure / handle
mov eax,[memptr] ; тип контрола
mov ecx,[CtrlSizeTable + eax] ; number of bytes

    stdcall KWHeapPut, [hheap],eax,ecx
    jc .error
    
    mov edx,[ControlNumber]
    mov [ControlList + edx*4],eax

    add edx,4
    mov [ControlNumber],edx

    
------------
proc DeleteCtrlFromTable hctrl
; hctrl - addr of struct of ctrl
; удаляем из таблички контролов
; ищем его в таблице, от начала до конца
    mov esi,[CtrlTable]
    mov ecx,[CtrlTableCount]
@@:
    mov eax,[esi]
    cmp eax,[hctrl]
    je .found
    djnz @b
    ; not found
    ....
.found:
    ; esi - addr of cell in table



-----------------------------------------
-----------------------------------------

куча связанный список

-----------------------------------------
-----------------------------------------
все размеры и адреса округлены до dword

служебные данные
.Size  (dword)  addr+0
.Next  (dword)  addr+4
.Prev  (dword)  addr+8
data   ...      addr+12
INFOSIZE = 12 ; размер служебных данных
              ; округлен до dword

Определяем минимальный размер блока:
(округлить до dword)
MINBLOCKSIZE = INFOSIZE + ?...

.Size - размер в байтах для данных (!!!)
bit31 - флаг занятого блока.
.Size должен быть меньше 2**31

.Next - Адрес следующего блока.
.Next == NULL : признак последнего блока кучи
в .Next сохраняются адреса блоков
  а передаются адреса данных в этих блоках.
  т.е. +12
  
.Prev - адрес предыдущeго блока.
    если равен NULL, то начальный блок

;BLOCKISFREE = 00b  ???
BLOCKISBUSY = 80 00 00 00h
;1000 0000 0000 0000 0000 0000 0000 0000b


---------------------------
malloc(size)
создать блок (ячею) памяти.
  размер = INFOSIZE + size,
  округлённый в большую сторону до dword.
  Находим свободное место, 
  размером равным или бльшим INFOSIZE+size 
  Разделяем его на два - 
  занятую нужного размера
  и незанятую, остаток (если он будет).
  Из остатка делаем доп. блок.
  Если размер остатка меньше MINBLOCKSIZE,
  то увеличиваем size на размер остатка.
---------------------------
  

вариант с единственной кучей
hHeap dd 0 ; кратно 4K
---------------------------


округлять размер данных блока памяти до:
BLOCKBRICK (4,8,12,16...) кратна 4
   (гранулярность)
не оставлять остаток менее чем:
MINBLOCKSIZE - размер кратен 4,
               включает и INFOSIZE

адрес блока памяти кратен 4,
 два младших бита - свбодны...

---------------------------
поиск в куче свободного блока
размером >= size и его аллокация
---------------------------

MemAlloc
proc MemAlloc  size
    ; округлить size
    mov ecx,[size]
    dec ecx
    or  ecx,BLOCKBRICK-1
    inc ecx
    mov [size],ecx

    mov eax,[hHeap]; адрес первичного блока
  
  .mainloop:
    ; eax - адрес блока, this
    ; [eax] = .Size и флаг занятости
    test [eax],BLOCKISBUSY ; bit 31 = 1 ?
    jnz  .foundfreeblock ; нет, не занято
    
    ; занято, переход к след. блоку
  .gonext:
    mov eax,[eax + 4] ; this = .Next
    or  eax,eax ; нуль-адрес?
    jnz .mainloop ; не нуль. есть еще
    ; конец кучи!
    ; TO DO надо создать еще область  ??
    ;...
    
  .foundfreeblock:
    ; eax - адрес блока
    ; ecx = [size] - размер данных клиенту.
    ; сравним размеры найденного и нужного,
    ; получим свободный остаток весь
    mov edx,[eax] ; .Size
    sub edx,ecx ; тут не надо INFOSIZE
    jc  .gonext ; .Size < size, не входит!
    
    ; блок подходит. делаем занятым
    or [eax],BLOCKISBUSY
    
    ; edx - остаток
    ; можем из остатка сделать доп. блок?
    cmp edx,MINBLOCKSIZE + INFOSIZE
    jc  .toosmall ; остаток мал
    
  ; делаем новый свободный блок из остатка
    ; не забыть, что блок может быть последним.
    ; разделяем, заводим доп. ячею:
    ; вычислить адрес доп. блока
    ; туда скопировать старый .Next.
    ; вычислить размер данных доп. блока
    ; 
    mov [eax+4],edx
    lea edx,[eax+edx+INFOSIZE]
    ; edx - адрес новой ячеи
    
    ; делаем свободный остаток
    mov [edx],BLOCKISFREE
    mov [edx+4],ecx.....?
    
    
  .toosmall:
    ; из остатка не сделать нов.блок
    ; оставим исходный размер данных без изменений

    ; возвращаем результат
    add eax,INFOSIZE
    ; CF = 0
    ret
    
endp

    test [eax],BLOCKISLAST ; bit 1 = 1 ?

    mov eax,[hHeap]
    
;---------------------------
; 
;---------------------------

; FreeBlock(This) - освободить блок 
; установить флаг в This.next: BLOCKISFREE
; Next = This.next
; Prev = This.Prev
; MergeBlocks(This, Next)
; MergeBlocks(This, Prev)
; return

; 

; MergeBlocks(B1, B2) B - адреса
; если B2 меньше, обмениваем B1, B2.
; если В1 == null, то return
; проверяем, встык ли блоки:
; если
; B1 + B1.size + INFOSIZE == B2,    ???
; то они встык )), надо объединять
; (между блоками встык может быть зазор!!)
;(вообще-то надо прошерстить все блоки
; по порядку и проверить, нет ли блока с 
; адресом, попадающим в зазор;  =((
; по идее этот блок не может быть свободен)
; (а если там может быть блок, то всё
;   как-то непонятно)
; Объединяем:
; 
;
; ф-ция возвращает адрес объед-ного блока

    
MemFree
proc MemFree addr
    

endp